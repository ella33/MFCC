package dao;

import model.User;
import transaction.Operation;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by Elev on 04.02.2017.
 */
public class UserDAO {
    private Connection connection;
    public void create() throws SQLException {
        String sql;
        Statement statement;

        sql = "CREATE TABLE user(id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, username VARCHAR (30))";
        statement = connection.createStatement();
        statement.execute(sql);
    }
    public List<User> getAllUsers(){
        List<User> allUsers = new ArrayList<>();
        try{
            Statement statement = connection.createStatement();
            String sql = "select * from user";
            ResultSet rs = statement.executeQuery(sql);

            while (rs.next()) {
                User user = new User();
                user.setId(rs.getInt("id"));
                user.setUsername(rs.getString("username"));

                allUsers.add(user);

            }
        }
        catch(SQLException e){
            System.err.println(e);
        }

        return allUsers;
    }
    public User findUserByID(int id){
        User user = new User();
        try{
            String sql = "select * from user where id = ?";
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setInt(1, id);
            ResultSet rs = statement.executeQuery();

            while (rs.next()) {
                user.setId(rs.getInt("id"));
                user.setUsername(rs.getString("username"));
            }
        }
        catch(SQLException e){
            System.err.println(e);
        }

        return user;
    }

    public int insert(User user) {
        try{
            String sql;
            PreparedStatement statement;

            sql = "insert into user(username) values (?)";
            statement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);

            statement.setString(1, user.getUsername());
            statement.executeUpdate();

            try (ResultSet generatedKeys = statement.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    return generatedKeys.getInt(1);
                }
                else {
                    throw new SQLException("Creating user failed, no ID obtained.");
                }
            }
        }
        catch(SQLException e){
            System.err.println(e);
            return -1;
        }
    }

    public Operation generateInsertOperationRollback(int userID) {
        try{
            String sql = "delete from user where id = ?";
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setInt(1, userID);
            return new Operation(statement);
        }
        catch(SQLException e){
            System.err.println(e);
            return null;
        }
    }

    public void delete(int userID) {
        try{
            String sql = "delete from user where id = ?";
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setInt(1, userID);

            statement.executeUpdate();
        }
        catch(SQLException e){
            System.err.println(e);
        }
    }

    public Operation generateDeleteOperationRollback(User user) {
        try{
            String sql = "insert into user values (?, ?)";
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setInt(1, user.getId());
            statement.setString(2, user.getUsername());

            return new Operation(statement);
        }
        catch(SQLException e){
            System.err.println(e);
            return null;
        }
    }

    public void setConnection(Connection connection) {
        this.connection = connection;
    }
}
