package dao;

import model.Book;
import transaction.Operation;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by Elev on 04.02.2017.
 */
public class BookStoreDAO {
    private Connection connection;

    public void create() throws SQLException {
        String sql;
        Statement statement;

        sql = "CREATE TABLE book(id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, title VARCHAR (30), price int, copies int)";
        statement = connection.createStatement();
        statement.execute(sql);

        sql = "CREATE TABLE borrowed_book(id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, userID int, bookID int)";
        statement.execute(sql);
    }

    public List<Book> getAllBooks(){
        List<Book> allBooks = new ArrayList<>();
        try{
            Statement statement = connection.createStatement();
            String sql = "select * from book";
            ResultSet rs = statement.executeQuery(sql);

            while (rs.next()) {
                Book book = new Book();
                book.setId(rs.getInt("id"));
                book.setTitle(rs.getString("title"));
                book.setPrice(rs.getInt("price"));
                book.setCopies(rs.getInt("copies"));

                allBooks.add(book);

            }
        } catch(SQLException e){
            System.out.println(e.getMessage());
        }

        return allBooks;
    }

    public Book findBookByID(int id){
        Book book = new Book();
        try{
            String sql = "select * from book where id = ?";
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setInt(1, id);
            ResultSet rs = statement.executeQuery();

            while (rs.next()) {
                book.setId(rs.getInt("id"));
                book.setTitle(rs.getString("title"));
                book.setPrice(rs.getInt("price"));
                book.setCopies(rs.getInt("copies"));
            }
        }
        catch(SQLException e){
            System.err.println(e.getMessage());
        }

        return book;
    }

    public int insert(Book book) {
        try{
            String sql;
            PreparedStatement statement;

            sql = "insert into book(title, price, copies) values (?, ?, ?)";
            statement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);

            statement.setString(1, book.getTitle());
            statement.setInt(2, book.getPrice());
            statement.setInt(3, book.getCopies());
            statement.executeUpdate();

            try (ResultSet generatedKeys = statement.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    return generatedKeys.getInt(1);
                }
                else {
                    throw new SQLException("Creating book failed, no ID obtained.");
                }
            }
        }
        catch(SQLException e){
            System.err.println(e.getMessage());
            return -1;
        }
    }

    public Operation generateInsertOperationRollback(int bookID) {
        try{
            String sql = "delete from book where id = ?";
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setInt(1, bookID);
            return new Operation(statement);
        }
        catch(SQLException e){
            System.out.println(e.getMessage());
            return null;
        }
    }

    public void update(Book book) {
        try {
            String sql = "update book set  copies = ? where id = ?";
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setInt(1, book.getCopies());
            statement.setInt(2, book.getId());

            statement.executeUpdate();

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    public Operation generateUpdateOperationRollback(Book book) {
        try{
            String sql = "update book set  copies = ? where id = ?";
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setInt(1, book.getCopies());
            statement.setInt(2, book.getId());
            return new Operation(statement);
        }
        catch(SQLException e){
            System.out.println(e.getMessage());
            return null;
        }
    }

    public int borrowBook(int userID, int bookID) {
        try{
            String sql;
            PreparedStatement statement;

            sql = "insert into borrowed_book(userID, bookID) values (?, ?)";
            statement = connection.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);

            statement.setInt(1, userID);
            statement.setInt(2, bookID);
            statement.executeUpdate();

            try (ResultSet generatedKeys = statement.getGeneratedKeys()) {
                if (generatedKeys.next()) {
                    return generatedKeys.getInt(1);
                }
                else {
                    throw new SQLException("Creating book failed, no ID obtained.");
                }
            }
        }
        catch(SQLException e){
            System.err.println(e.getMessage());
            return -1;
        }
    }

    public Operation generateInsertBorrowedBookOperationRollback(int boorowedBookID) {
        try{
            String sql = "delete from borrowed_book where id = ?";
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setInt(1, boorowedBookID);
            return new Operation(statement);
        }
        catch(SQLException e){
            System.out.println(e.getMessage());
            return null;
        }
    }

    public void returnBook(int userID, int bookID) {
        try{
            String sql = "delete from borrowed_book where userID = ? and bookID = ?";
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setInt(1, userID);
            statement.setInt(2, bookID);

            statement.executeUpdate();
        }
        catch(SQLException e){
            System.err.println(e);
        }
    }

    public Operation generateReturnBorrowedBookOperationRollback(int userID, int bookID) {
        try{
            String sql = "insert into borrowed_book values (?, ?)";
            PreparedStatement statement = connection.prepareStatement(sql);
            statement.setInt(1, userID);
            statement.setInt(2, bookID);

            return new Operation(statement);
        }
        catch(SQLException e){
            System.err.println(e);
            return null;
        }
    }

    public void setConnection(Connection connection) {
        this.connection = connection;
    }
}
